# Simple workflow for deploying static content to GitHub Pages
name: Deploy and Test for accessibility

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  env:
    acs-website: https://www.acs.org/
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
  axe:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
      - run: npm ci
      - run: npm run build --if-present
      - run: npm start & npx wait-on $acs-website
      - run: npm i chromedriver
      - name: Run axe
        run: |
          npm install -g @axe-core/cli
          axe $acs-website --chromedriver-path="/bin/chromedriver" --exit
  lighthouse:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@master
        - name: Lighthouse
          uses: foo-software/lighthouse-check-action@master
          id: lighthouseCheck
          with:
            device: "all"
            urls: "$acs-website"
        - name: Verify Lighthouse Check results
          uses: foo-software/lighthouse-check-status-action@master
          with:
            lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
            minAccessibilityScore: "90"
            minBestPracticesScore: "50"
            minPerformanceScore: "50"
            minProgressiveWebAppScore: "50"
            minSeoScore: "50"